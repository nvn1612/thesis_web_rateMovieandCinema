generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_id               Int            @id @default(autoincrement())
  email                 String         @unique(map: "email") @db.VarChar(255)
  username              String         @unique(map: "username") @db.VarChar(255)
  password              String         @db.VarChar(255)
  avatar                String?        @db.VarChar(255)
  name                  String?        @db.VarChar(255)
  phone_number          String?        @unique(map: "phone_number") @db.VarChar(20)
  address               String?        @db.VarChar(255)
  activation_token      String?        @unique(map: "activation_token") @db.VarChar(255)
  forgot_password_token String?        @unique(map: "forgot_password_token") @db.VarChar(255)
  is_active             Boolean        @default(false)
  is_Admin              Boolean        @default(false)
  is_expert             Boolean        @default(false)
  movie_rating          movie_rating[]
}

model genres {
  genre_id     Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  movie_genres movie_genres[]
}

model movie_genres {
  movie_id Int
  genre_id Int
  movies   movies @relation(fields: [movie_id], references: [movie_id], onDelete: NoAction, onUpdate: NoAction, map: "movie_genres_ibfk_1")
  genres   genres @relation(fields: [genre_id], references: [genre_id], onDelete: NoAction, onUpdate: NoAction, map: "movie_genres_ibfk_2")

  @@id([movie_id, genre_id])
  @@index([genre_id], map: "genre_id")
}

model movies {
  movie_id       Int            @id @default(autoincrement())
  name_movie     String         @db.VarChar(255)
  trailer_link   String?        @db.VarChar(255)
  poster_image   String?        @db.VarChar(255)
  backdrop_image String?        @db.VarChar(255)
  country        String?        @db.VarChar(255)
  description    String         @db.Text
  director       String?        @db.VarChar(255)
  release_date   DateTime?      @db.Date
  duration       Int?
  created_at     DateTime?      @default(now()) @db.Timestamp(0)
  updated_at     DateTime?      @default(now()) @db.Timestamp(0)
  movie_genres   movie_genres[]
  movie_rating   movie_rating[]
}

model movie_rating {
  movie_rating_id       Int       @id @default(autoincrement())
  user_id               Int
  movie_id              Int
  content_rating        Int
  acting_rating         Int
  visual_effects_rating Int
  sound_rating          Int
  directing_rating      Int
  entertainment_rating  Int
  comment               String?   @db.Text
  created_at            DateTime? @default(now()) @db.Timestamp(0)
  updated_at            DateTime? @default(now()) @db.Timestamp(0)
  users                 users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "movie_rating_ibfk_1")
  movies                movies    @relation(fields: [movie_id], references: [movie_id], onDelete: Cascade, onUpdate: NoAction, map: "movie_rating_ibfk_2")

  @@unique([user_id, movie_id], map: "user_movie_unique")
  @@index([movie_id], map: "movie_id_index")
  @@index([user_id], map: "user_id_index")
}
